import { useQueryInteriors } from '@/api/query-hooks/Interior'
import InteriorService from '@/api/services/Interior'
import Content from '@/components/Content/Content'
import Dialog from '@/components/Dialog/Dialog'
import Header from '@/components/Header/Header'
import Interior from '@/components/Interior/Interior'
import { InteriorType, Render } from '@/components/InteriorManager/InteriorManager'
import { useInteriorItems } from '@/components/InteriorManager/useInteriorItems'
import NewRender from '@/components/NewRender/NewRender'
import { GetServerSideProps, InferGetServerSidePropsType } from 'next'
import Head from 'next/head.js'
import Script from 'next/script.js'
import { useEffect, useState } from 'react'

// Load mock data
// const [, setInteriorItems] = [, useInteriorState.getState().setItems]
// setInteriorItems(interiorItems)

// const inter = Inter({ subsets: ['latin'] })

export const getServerSideProps: GetServerSideProps<{ interiors: InteriorType[] }> = async () => {
  const interiors = await InteriorService.getInteriors(0, 10)

  return {
    props: {
      interiors,
    },
  }
}

export default function Home({ interiors }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { data: serverInteriors } = useQueryInteriors(interiors)

  const [, setInteriorItems] = useInteriorItems()

  const [newRenderOpen, setNewRenderOpen] = useState<boolean>(false)
  const [interior, setInterior] = useState<{
    currentInterior?: {
      image: string
      renders: Render[]
    }
    interiorIndex: number
  }>({ currentInterior: undefined, interiorIndex: -1 })
  const [render, setRender] = useState<{ currentRender?: Render; renderIndex: number }>({
    currentRender: undefined,
    renderIndex: -1,
  })

  useEffect(() => {
    if (serverInteriors) {
      setInteriorItems(serverInteriors.pages.flat())
    }
  }, [])

  return (
    <>
      <Head>
        <title>ModernDesign AI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <Header openNewRenderModal={() => setNewRenderOpen(true)} />
      <Content onInteriorSelect={setInterior} onRenderSelect={setRender} />
      <Dialog fullWidth maxWidth="sm" open={newRenderOpen} onClose={() => setNewRenderOpen(false)}>
        <NewRender />
      </Dialog>
      <Dialog
        fullWidth
        // fullScreen
        // maxWidth={false}
        // maxWidth={!!currentRender ? 'lg' : 'xl'}
        maxWidth="xl"
        className="flex flex-grow justify-center items-center"
        open={!!interior?.currentInterior || !!render?.currentRender}
        onClose={() => {
          setInterior({ currentInterior: undefined, interiorIndex: -1 })
          setRender({ currentRender: undefined, renderIndex: -1 })
        }}
        contentClasses={{ root: 'flex' }}
        keepMounted={false}
      >
        <Interior interior={interior} render={render} setRender={setRender} />
      </Dialog>
      {/* <StyleGallery /> */}
      <Script src="https://www.googletagmanager.com/gtag/js?id=G-B62T0MRV0M" strategy="afterInteractive" async />
      <Script id="google-analytics" strategy="afterInteractive">
        {`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());

          gtag('config', 'G-B62T0MRV0M');
        `}
      </Script>
    </>
  )
}
